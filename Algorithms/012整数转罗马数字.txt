题目：
罗马数字包含以下七种字符： I， V， X， L，C，D 和 M。

字符          数值
I             1
V             5
X             10
L             50
C             100
D             500
M             1000
例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。 27 写做  XXVII, 即为 XX + V + II 。

通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：

I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。
X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。 
C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。
给定一个整数，将其转为罗马数字。输入确保在 1 到 3999 的范围内。

示例 1:

输入: 3
输出: "III"
示例 2:

输入: 4
输出: "IV"
示例 3:

输入: 9
输出: "IX"
示例 4:

输入: 58
输出: "LVIII"
解释: L = 50, V = 5, III = 3.
示例 5:

输入: 1994
输出: "MCMXCIV"
解释: M = 1000, CM = 900, XC = 90, IV = 4.

############################################################
思路:
第一步：分析题目，题目比较长，仔细分析后发现相当于是给定数字，然后按照罗马字符和数值的规则去一一对应转化即可，其中需要夹杂一些特殊情况来考虑;
第二步：首先我们发现这些特殊规则和已给定的对照关系不冲突，因此我们可以简化逻辑，干脆就把这些特殊的规则（比如IV 对应4）也加入到对照关系中，由于题目限定了整数范围，因此我们可以罗列出所有的对照关系，然后在循环中不断地将每一位数字根据对照规则转化即可（我们列出的对应关系后去考虑的时候要从大到小去考虑，因此要从大到小去排列）；
第三步：由于我们每次要首先考虑最大的数值对应的字符来进行转化，不可能1000就用1000个I来表示，因此在处理逻辑上可以采用贪心算法

############################################################
结论：
1、定义对照关系可以是hash表，可以是两个数组，一个表示罗马数值，一个是表示的数值，按照从大到小的顺序排列；
2、不断循环从数值数组的最大值（1000）开始比较大小，当给定的数值大于数组里的数时，下面根据它的下标取罗马数值中的数，如此循环;
3、当循环结束，输出组成的字符串即可


时间复杂度：O(1) 由于题目限定了数值转化罗马数字的范围，并给定了所有的对应关系，时间复杂度都是固定的，不管用任何算法都是O(1)
空间复杂度：O(1) 同时间复杂度一样，空间复杂度也是固定范围的，两个对应关系的长度固定的数组，因此空间复杂度也只能是O(1)
############################################################
附上java,python3的实现代码：
java：
public class Solution {

    public String intToRoman(int num) {
        // 把阿拉伯数字与罗马数字可能出现的所有情况和对应关系，放在两个数组中
        // 并且按照阿拉伯数字的大小降序排列，这是贪心选择思想
        int[] nums = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};
        String[] romans = {"M", "CM", "D", "CD", "C", "XC", "L", "XL", "X", "IX", "V", "IV", "I"};

        StringBuilder stringBuilder = new StringBuilder();
        int index = 0;
        while (index < nums.length) {
            // 特别注意：这里是等号
            while (num >= nums[index]) {
                // 注意：这里是等于号，表示尽量使用大的"面值"
                stringBuilder.append(romans[index]);
                num -= nums[index];
            }
            index++;
        }
        return stringBuilder.toString();
    }
}

class Solution:
    def intToRoman(self, num: int) -> str:
        # 把阿拉伯数字与罗马数字可能出现的所有情况和对应关系，放在两个数组中
        # 并且按照阿拉伯数字的大小降序排列，这是贪心选择思想
        nums = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]
        romans = ["M", "CM", "D", "CD", "C", "XC", "L", "XL", "X", "IX", "V", "IV", "I"]

        index = 0
        res = ''
        while index < len(nums):
            # 注意：这里是等于号，表示尽量使用大的"面值"
            while num >= nums[index]:
                res += romans[index]
                num -= nums[index]
            index += 1
        return res
