题目：
请你来实现一个 atoi 函数，使其能将字符串转换成整数。

首先，该函数会根据需要丢弃无用的开头空格字符，直到寻找到第一个非空格的字符为止。

当我们寻找到的第一个非空字符为正或者负号时，则将该符号与之后面尽可能多的连续数字组合起来，作为该整数的正负号；假如第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成整数。

该字符串除了有效的整数部分之后也可能会存在多余的字符，这些字符可以被忽略，它们对于函数不应该造成影响。

注意：假如该字符串中的第一个非空格字符不是一个有效整数字符、字符串为空或字符串仅包含空白字符时，则你的函数不需要进行转换。

在任何情况下，若函数不能进行有效的转换时，请返回 0。

说明：

假设我们的环境只能存储 32 位大小的有符号整数，那么其数值范围为 [−2^31,  2^31 − 1]。如果数值超过这个范围，请返回  INT_MAX (2^31 − 1) 或 INT_MIN (−2^31) 。

示例 1:

输入: "42"
输出: 42
示例 2:

输入: "   -42"
输出: -42
解释: 第一个非空白字符为 '-', 它是一个负号。
     我们尽可能将负号与后面所有连续出现的数字组合起来，最后得到 -42 。
示例 3:

输入: "4193 with words"
输出: 4193
解释: 转换截止于数字 '3' ，因为它的下一个字符不为数字。
示例 4:

输入: "words and 987"
输出: 0
解释: 第一个非空字符是 'w', 但它不是数字或正、负号。
     因此无法执行有效的转换。
示例 5:

输入: "-91283472332"
输出: -2147483648
解释: 数字 "-91283472332" 超过 32 位有符号整数范围。 
     因此返回 INT_MIN (−2^31)


############################################################
思路:
第一步：分析题目，题目介绍了一大堆规则，比较长，我们可以着重看下面的示例，然后对照它的解释来理解题目，其实已有atoi (表示 ascii to integer)是把字符串转换成整型数的一个函数;
第二步：首先我们需要去掉字符串开头的空格，然后找到第一个非空字符，看是否为正负号或者数字，不是就返回0，如果是数字就代表是正号，同时这是第一个数字，然后去寻找下一个出现的数字，这里要注意数字需要是连续出现的，如果发现下一个不是数字了就直接不找了，后面全部舍弃;
第三步：和上一道题类似，再最后我们还要判断数值溢出问题，根据题意，只能存储32位大小的有符号整数，超出范围就存边界值


############################################################
结论：
1、首先去除字符串左边的空格,然后如果第一个非空字符不是负号也不是，直接return 0;
2、定义sign是符号位,start指针指向第一个数字的位置,如果第一位为数字,则sign=1,start=0,否则firstChar接收字符串第一个字符,若为“+”、“-”,sign分别赋值1、-1,start自增1;
3、从字符串第一个为数字的位置开始遍历,res为无符号结果,如果res大于Integer最大值且sign=1,输出Integer的最大值,反之输出Integer最小值,如果遍历到不为数字的字符,则直接返回res*sign;
4、如果第一个非空字符位是符号位，同时下一个字符不是数字，则直接返回0(题意未说明，从测试用例中得出);
5、这类判断多的题目，可以考虑用正则表达式

char中的数字转为long，可以使用-'0'：
以 '1' 转换成 1 为例：
原因:'1'在计算机中以字符1的ascii码值（即二进制表示的49)存放，而数值型1在计算机中以二进制表示的1存放。因此'1'转换成1，（49-48=1）,而48是字符'0'的ascii码值。所以1 = '1' - '0';

复杂度：
时间复杂度：O(n)，x中大约有log10(x)位数字。
空间复杂度：O(n)。
############################################################
附上java,python3的实现代码：

class Solution {
    public int myAtoi(String str) {
        str = str.trim();  //题目要求去除左边空格，但是由于当末尾遇到非数字字符时不在取数据，因此我们也可以使用trim()方法来直接去掉首尾空格，结果不受影响
        if (str == null || str.length() == 0) 
            return 0;

        char firstChar = str.charAt(0); //得到首非空字符
        int sign = 1;	//符号位默认为正数
        int start = 0;  //出现数字起点，默认第一个
        long res = 0;	//所有连续数字
		// 当第一个为+-符号时，数字起点右移一位
        if (firstChar == '+') {
            sign = 1;
            start++;
        } else if (firstChar == '-') {
            sign = -1;
            start++;
        }
		//首非空字符如果是非数字，正负号直接返回0
		//首非空字符如果是正负号，第二个字符需要是数字，否则返回0
		//首非空字符后面出现数字后，如果数字后面是字符，直接返回res * sign
		//判断溢出
        for (int i = start; i < str.length(); i++) {
            if (!Character.isDigit(str.charAt(i))) {
                return (int) res * sign;
            }
			//char转为long，两种写法
            // res = res * 10 + str.charAt(i) - '0';
			res = res * 10 + Long.parseLong( String.valueOf(str.charAt(i)));
			
            if (sign == 1 && res > Integer.MAX_VALUE)
                return Integer.MAX_VALUE;
            if (sign == -1 && res > Integer.MAX_VALUE)
                return Integer.MIN_VALUE;
        }
        return (int) res * sign;
    }
}

python3：
python这里使用正则一句话就能过滤所有条件：
^：匹配字符串开头
[\+\-]：代表一个+字符或-字符
?：前面一个字符可有可无
\d：一个数字
+：前面一个字符的一个或多个
\D：一个非数字字符
*：前面一个字符的0个或多个

#re会返回含有唯一元素的list，我们需要用*解包：
# 参数解包：将整个list当做参数传给函数
list = [1, 2, 4]
def add_fn(a, b, c):
    return a + b + c
sum = add_fn(*list)
print("参数解包：", sum)
参数解包： 7

#2**31等于1<<31，不过由于左移运算符优先级较低，因此这里2**31 - 1 转化为(1<<31)-1要加括号，不然会优先计算31-1
运算符优先级：
[ ] . ( ) (方法调用)	从左向右
! ~ ++ -- +(一元运算) -(一元运算)	从右向左
* / %	从左向右
+ -	从左向右
<< >> >>>	从左向右
< <= > >= instanceof	从左向右
== !=	从左向右
&	从左向右
^	从左向右
|	从左向右
&&	从左向右
||	从左向右
?:	从右向左
=   从右向左

class Solution:
    def myAtoi(self, s: str) -> int:
        return max(min(int(*re.findall('^[\+\-]?\d+', s.lstrip())), 2**31 - 1), -2**31)






