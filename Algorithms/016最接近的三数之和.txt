题目：
给定一个包括 n 个整数的数组 nums 和 一个目标值 target。找出 nums 中的三个整数，使得它们的和与 target 最接近。返回这三个数的和。假定每组输入只存在唯一答案。

例如，给定数组 nums = [-1，2，1，-4], 和 target = 1.

与 target 最接近的三个数的和为 2. (-1 + 2 + 1 = 2).

############################################################
思路:
第一步：分析题目，本题是上一题三数之和的升级版，不过很相似，因为上一题相当于是给定目标值target=0，而这里的target是可变的，让找到最接近的;
第二步：首先，我们可以和两个数求和那样先使用暴力法，遍历三次数组，分别求出所有的三数之和，然后找出最接近target的和并输出，不过复杂度过高O(n^3)，我们可以和上一题类似，采取优化措施；
第三步：优化思路和上一题一样，先进行排序，后采用双指针不断的靠近，由于这里是让输出三个数之和里面最接近target的值，因此不用考虑三个数的组合重复问题

############################################################
结论：
1、双指针法的前提是数组要是有序的，因此我们首先给数组nums排序，复杂度为 O(NlogN)；
2、固定3个指针，最左（最小）数字的指针 k，双指针 i，j 分设在数组索引 (k, len(nums))两端，通过双指针交替向中间移动：
3、首先声明一个整数anw用于记录三个数字的和，初始化为排序后前三个数字的和，然后在循环中：
	当abs(三数和-target) < abs(anw-target)时，替换anw=三数和；
	当三数和 < target时，i += 1；
	当三数和 > target时，j -= 1；
	当三数和 == target时，直接返回三数和
注意：初始化三数之和变量时可以赋予其中三个数字的和也可以赋予极大值
	Python中可以用如下方式表示正负无穷：
		float("inf"), float("-inf")
		inf扩展：
		不等式：
			当涉及 > 和 < 运算时，
			所有数都比-inf大
			所有数都比+inf小
		等式：
			+inf 和 +inf相等
			-inf 和 -inf相等
	
复杂度分析：
时间复杂度 O(N^2))：其中固定指针k循环复杂度 O(N)，双指针 i，j 复杂度，排序复杂度O(NlogN)；总复杂度 O(NlogN) + O(n^2) = O(n^2)
空间复杂度 O(1)：指针使用常数大小的额外空间


############################################################
附上java,python3的实现代码：
java方法：
class Solution {
    public int threeSumClosest(int[] nums, int target) {
        Arrays.sort(nums);
        int anw = nums[0] + nums[1] + nums[2];
        for(int i=0;i<nums.length;i++) {
            int start = i+1, end = nums.length - 1;
            while(start < end) {
                int sum = nums[start] + nums[end] + nums[i];
                if(Math.abs(target - sum) < Math.abs(target - anw))
                    anw = sum;
                if(sum > target)
                    end--;
                else if(sum < target)
                    start++;
                else
                    return anw;
            }
        }
        return anw;
    }
}

python3方法：
简化前：
class Solution:
    def threeSumClosest(self, nums: List[int], target: int) -> int:
        size = len(nums)
        # 特判
        if size < 3:
            return []
        # 初始化，因为找最小值，因此把初始值设置成实数的最大值
        diff = float('inf')

        # 排序是前提
        nums.sort()

        for i in range(size - 2):
            # 常见的剪枝操作
            if i > 0 and nums[i] == nums[i - 1]:
                continue
            # 双指针：指针对撞
            left = i + 1
            right = size - 1
            while left < right:
                s = nums[i] + nums[left] + nums[right]

                if abs(s - target) < diff:
                    diff = abs(s - target)
                    res = s

                # 不管是变小还是变大，尝试的作用是让 s 与 target 更接近
                # 即 s 与 target 的绝对值之差越来越小
                if s > target:
                    # 如果大了，尝试右边界收缩一格，让 target 变小
                    right -= 1
                elif s < target:
                    # 如果小了，尝试左边界收缩一格，让 target 变大
                    left += 1
                else:
                    # 如果已经等于 target 的话, 肯定是最接近的，根据题目要求，返回这三个数的和
                    return target
        return res
简化后：
class Solution:
    def threeSumClosest(self, nums: List[int], target: int) -> int:
        nums, r, end = sorted(nums), float('inf'), len(nums) - 1
        for c in range(len(nums) - 2):
            i, j = max(c + 1, bisect.bisect_left(nums, target - nums[end] - nums[c], c + 1, end) - 1), end
            while r != target and i < j:
                s = nums[c] + nums[i] + nums[j]
                r, i, j = min(r, s, key=lambda x: abs(x - target)), i + (s < target), j - (s > target)
        return r