题目：
罗马数字包含以下七种字符: I， V， X， L，C，D 和 M。

字符          数值
I             1
V             5
X             10
L             50
C             100
D             500
M             1000
例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。 27 写做  XXVII, 即为 XX + V + II 。

通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：

I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。
X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。 
C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。
给定一个罗马数字，将其转换成整数。输入确保在 1 到 3999 的范围内。

示例 1:

输入: "III"
输出: 3
示例 2:

输入: "IV"
输出: 4
示例 3:

输入: "IX"
输出: 9
示例 4:

输入: "LVIII"
输出: 58
解释: L = 50, V= 5, III = 3.
示例 5:

输入: "MCMXCIV"
输出: 1994
解释: M = 1000, CM = 900, XC = 90, IV = 4.

############################################################
思路:
第一步：分析题目，本题和上一题整数转罗马数字恰好相反，但对应关系不变;
第二步：首先我们发现这些特殊规则和已给定的对照关系不冲突，因此我们可以简化逻辑，干脆就把这些特殊的规则（比如IV 对应4）也加入到对照关系中，由于题目限定了整数范围，因此我们可以罗列出所有的对照关系，然后在循环中不断地将每一位数字根据对照规则转化即可（我们列出的对应关系后去考虑的时候要从大到小去考虑，因此要从大到小去排列）；
第三步：再次使用贪心算法，根据对照关系去求解；
第四步：还可以使用hashmap存储每一个罗马数字和整数的对应关系，然后从左到右遍历分离给定的罗马字符串，优先取2位长度罗马数字（比如IV在I左边），然后没有的话，再取1位进行map匹配，并将所有找到的结果相加即可

############################################################
结论：
第一种方法：不断从要求的罗马字符串中获取2位或者1位数字去和罗马数字字符数组对比，然后根据下标取得另一个整数数组的值，循环相加就可以求得所要求的转化后的整数；
第二种方法：将对应关系放到一个hashmap中，然后从左到右遍历给定的罗马字符串，优先选取2位长度去对比，如果找不到就取1位长度，如此循环取得对应的整数，所有整数相加即可

补充：https://www.cnblogs.com/pejsidney/p/9235343.html 集合初始化可优化写法
时间复杂度：O(1) 由于题目限定了数值转化罗马数字的范围，并给定了所有的对应关系，时间复杂度都是固定的，不管用任何算法都是O(1)
空间复杂度：O(1) 同时间复杂度一样，空间复杂度也是固定范围的，两个对应关系的长度固定的数组，因此空间复杂度也只能是O(1)
############################################################
附上java,python3,C的实现代码：
java方法1：
class Solution {
    public int romanToInt(String s) {
        String[] roman = {"IV", "IX", "XL", "XC", "CD", "CM", "I", "V", "X", "L", "C", "D", "M" };
        int[] nums = {4, 9, 40, 90, 400, 900, 1, 5, 10, 50, 100, 500, 1000 };
        int num = 0;
        while (s.length() > 0) {
            for (int i = 0; i < roman.length; i++) {
                if (s.startsWith(roman[i])) {
                    num += nums[i];
                    s = s.substring(roman[i].length());
                    break;
                }
            }
        }
        return num;
	}
}
java方法2：
class Solution {
    public int romanToInt(String s) {
        Map<String, Integer> map = new HashMap<>();
        map.put("I", 1);
        map.put("IV", 4);
        map.put("V", 5);
        map.put("IX", 9);
        map.put("X", 10);
        map.put("XL", 40);
        map.put("L", 50);
        map.put("XC", 90);
        map.put("C", 100);
        map.put("CD", 400);
        map.put("D", 500);
        map.put("CM", 900);
        map.put("M", 1000);
        
        int ans = 0;
        for(int i = 0;i < s.length();) {
            if(i + 1 < s.length() && map.containsKey(s.substring(i, i+2))) {
                ans += map.get(s.substring(i, i+2));
                i += 2;
            } else {
                ans += map.get(s.substring(i, i+1));
                i ++;
            }
        }
        return ans;
    }
}
java方法3：
class Solution {
	public int romanToInt(String s) {
			int n = s.length();
			int roman_int = 0;
			for(int i=0;i<n;i++)
			{
				switch(s.charAt(i)) 
				{
				case 'I' : roman_int = roman_int + 1;break;
				case 'V' : roman_int = roman_int + 5;break;
				case 'X' : roman_int = roman_int + 10;break;
				case 'L' : roman_int = roman_int + 50;break;
				case 'C' : roman_int = roman_int + 100;break;
				case 'D' : roman_int = roman_int + 500;break;
				case 'M' : roman_int = roman_int + 1000;break;
				default: System.out.println("default");break;
				}

				if(i!=0)
				{
					if(((s.charAt(i)=='V')||(s.charAt(i)=='X'))&&(s.charAt(i-1)=='I')) 
						roman_int = roman_int-1*2;
					if(((s.charAt(i)=='L')||(s.charAt(i)=='C'))&&(s.charAt(i-1)=='X'))
						roman_int = roman_int-10*2;
					if(((s.charAt(i)=='D')||(s.charAt(i)=='M'))&&(s.charAt(i-1)=='C'))
						roman_int = roman_int-100*2;
				}
			}
			return roman_int;
		}
}
python方法1：
class Solution:
    def intToRoman(self, num: int) -> str:
        # 把阿拉伯数字与罗马数字可能出现的所有情况和对应关系，放在两个数组中
        # 并且按照阿拉伯数字的大小降序排列，这是贪心选择思想
        nums = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]
        romans = ["M", "CM", "D", "CD", "C", "XC", "L", "XL", "X", "IX", "V", "IV", "I"]

        index = 0
        res = ''
        while index < len(nums):
            # 注意：这里是等于号，表示尽量使用大的"面值"
            while num >= nums[index]:
                res += romans[index]
                num -= nums[index]
            index += 1
        return res
python方法2：
class Solution:
    def romanToInt(self, s):
        """
        :type s: str
        :rtype: int
        """
        a = {'I':1, 'V':5, 'X':10, 'L':50, 'C':100, 'D':500, 'M':1000}        
        ans=0        
        for i in range(len(s)):            
            if i<len(s)-1 and a[s[i]]<a[s[i+1]]:                
                ans-=a[s[i]]
            else:
                ans+=a[s[i]]
        return ans
python方法3：		
python3 可以简化各个步骤，在修改对照关系的前提下使用一行代码完成：
代码行数：解析
1、构建一个字典记录所有罗马数字子串，注意长度为2的子串记录的值是（实际值 - 子串内左边罗马数字代表的数值）
2、这样一来，遍历整个 ss 的时候判断当前位置和前一个位置的两个字符组成的字符串是否在字典内，如果在就记录值，不在就说明当前位置不存在小数字在前面的情况，直接记录当前位置字符对应值
举个例子，遍历经过 IVIV 的时候先记录 II 的对应值 11 再往前移动一步记录 IVIV 的值 33，加起来正好是 IVIV 的真实值 44。max 函数在这里是为了防止遍历第一个字符的时候出现 [-1:0][−1:0] 的情况

扩展：
哈希表存储的是由键（key）和值（value）组 成的数据。例如，我们将每个人的性别作为数 据进行存储，键为人名，值为对应的性别。
Python 中我们使用字典 {key : value} 来初始化哈希表
通过 key 查找 value 的时间复杂度为 O(1)O(1)
这题题解中的 d 就是一个字典，其中 get(key, default) 函数可以通过 key 从 d 中找出对应的值，如果 key 不存在则返回默认值 default

class Solution:
    def romanToInt(self, s: str) -> int:
        d = {'I':1, 'IV':3, 'V':5, 'IX':8, 'X':10, 'XL':30, 'L':50, 'XC':80, 'C':100, 'CD':300, 'D':500, 'CM':800, 'M':1000}
        return sum(d.get(s[max(i-1, 0):i+1], d[n]) for i, n in enumerate(s))

C解法:		
int read(char a){
    switch (a){
        case 'I': return 1;
        case 'V': return 5;
        case 'X': return 10;
        case 'L': return 50;
        case 'C': return 100;
        case 'D': return 500;
        case 'M': return 1000;
        default:  printf("Input Error!\n");
                  return 0;
    }
}