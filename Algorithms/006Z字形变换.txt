题目：
将一个给定字符串根据给定的行数，以从上往下、从左到右进行 Z 字形排列。

比如输入字符串为 "LEETCODEISHIRING" 行数为 3 时，排列如下：

L   C   I   R
E T O E S I I G
E   D   H   N
之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如："LCIRETOESIIGEDHN"。

请你实现这个将字符串进行指定行数变换的函数：

string convert(string s, int numRows);
示例 1:

输入: s = "LEETCODEISHIRING", numRows = 3
输出: "LCIRETOESIIGEDHN"
示例 2:

输入: s = "LEETCODEISHIRING", numRows = 4
输出: "LDREOEIIECIHNTSG"
解释:

L     D     R
E   O E   I I
E C   I H   N
T     S     G


############################################################
思路:
第一步：分析题目，这类图形排布的题目首先要找到规律才能解;
第二步：通过给出的两个例子，我们可以发现行数和numRows的值相等，同时当行数为第0行和第n-1行时字符的顺序发生逆转，由于最终让输出的是从左到右从上到下的所有字符组成的新字符串，因此我们可以按行计算出每一行的字符都是什么，然后所有行组合在一起即可;
第三步：还要考虑一些特殊情况，如字符串长度较小，numRows为0，因此组合成的图形的行数为min(numRows,s.length())。



############################################################
结论：
首先根据numRows和字符串长度计算出行数，然后根据当行为0和n-1时字符在行0123，210间来回折返的规律设定一个中间布尔值来判断方向，并排列所有的字符；
然后将所求得的每行的字符输出成字符串即可。

复杂度：
设字符串的长度为n
时间复杂度：O(n）
空间复杂度：O(n)
############################################################
附上java,python3的实现代码：

java：
class Solution {
    public String convert(String s, int numRows) {

        if (numRows == 1) return s;

        List<StringBuilder> rows = new ArrayList<>();
        for (int i = 0; i < Math.min(numRows, s.length()); i++)
            rows.add(new StringBuilder());
            

        int curRow = 0;
        boolean goingDown = false;

        for (char c : s.toCharArray()) {
            rows.get(curRow).append(c);
            if (curRow == 0 || curRow == numRows - 1) goingDown = !goingDown;
            curRow += goingDown ? 1 : -1;
        }
        
        StringBuilder ret = new StringBuilder();
        for (StringBuilder row : rows){
            ret.append(row);
            } 
        return ret.toString();
    }
}

python：
class Solution:
    def convert(self, s: str, numRows: int) -> str:
        if numRows == 1:
            return s
        rows = [''] * min(numRows, len(s))
        curRow = 0
        goingDown = False
        for c in s:
            rows[curRow] += c
            if curRow == 0 or curRow == numRows - 1:
                goingDown = not goingDown
            curRow += 1 if goingDown else -1
        ret = ''.join(rows)
        return ret




