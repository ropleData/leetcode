题目：
给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。

你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。

示例:

给定 nums = [2, 7, 11, 15], target = 9
因为 nums[0] + nums[1] = 2 + 7 = 9
所以返回 [0, 1]

############################################################
思路:
第一步：首先看到这个题目，第一个反应是要遍历两遍数组，然后根据拿到的值，求和，看与目标值是否相等，相等就输出两个数所处的下标，但是时间复杂度太高O(n^2);
第二步：解决过高的时间复杂度，首先想到的是hash(python里叫字典);
第三步：将问题反过来去想，其实求数组中两个数之和为目标值，相当于是根据数组中一个数，求目标值-改数是否在剩余的数中。

############################################################
结论：
我们可以通过一次遍历，每读取一个数，就在hash表中寻找是否存在目标数-该数，如果存在就输出两者的下标，不存在就以该数为k，下标为v保存到hash表中。

复杂度：
时间复杂度：O(n)
空间复杂度：O(n)
############################################################
附上java和python的实现代码：

java：
class Solution {
    public int[] twoSum(int[] nums, int target) {
        int[] indexs = new int[2];
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < nums.length; i++) {
            int findNum = target - nums[i];
            if (map.containsKey(findNum)) {
                indexs[0] = map.get(findNum);
                indexs[1] = i;
                return indexs;
            }
            map.put(nums[i], i);
        }
        return indexs;
    }
}

python：
class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        hashmap = {}
        for index, num in enumerate(nums):
            findNum = target - num
            if findNum in hashmap:
                return [hashmap[findNum], index]
            hashmap[num] = index
        return None
        

